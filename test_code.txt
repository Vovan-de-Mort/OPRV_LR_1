//mutex.cpp
#include <time.h>
//#include <sys/neutrino.h>
#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
//#include "MessageException.h"
int num_thread = 2;
int ValThread1 = 0;
int ValThread2 = 0;
void * thread1(void *valthread1);
void * thread2(void *valthread2);
void * thread1(void *valthread1)//поток 1
{
time_t now;
char buf[27];
int i;
time(&now);
printf("Thread 1, time start %s",ctime_r(&now,buf));
//
После этого момента все потоки завершаться
time(&now);
for(int j = 0; j < 10; j++)
{
ValThread1++;
sleep(1);
}
}
void * thread2(void *valthread2)//поток 2
{
time_t now;
char buf[27];
int i;
//
int *val2 = (int *) valthread2;
time(&now);
printf("Thread 2, time start %s",ctime_r(&now,buf));
//
После этого момента все потоки завершаться
time(&now);
printf("Barrier in thread2, time %s",ctime_r(&now,buf));
for(int j = 0; j < 5; j++)
{
ValThread2++;
sleep(3);
}
}
int main()
//
{
time_t now;
char buf[27];
pthread_t thread_ids[2];
int threadcount; //счетчик потоков
pthread_attr_t attr;//атрибутная запись потока
pthread_attr_init(&attr);//инициализация атрибутной записи
pthread_attr_setinheritsched(&attr,PTHREAD_EXPLICIT_SCHED);
pthread_attr_setschedpolicy(&attr,SCHED_RR);//установить круговую
дисциплину диспетчеризации
struct sched_param param;
param.sched_priority = 16;
pthread_attr_setschedparam(&attr, &param);
//
Создать два потока, thread1 thread2
pthread_create(&thread_ids[0],&attr,thread1,(void *) ValThread1);
pthread_create(&thread_ids[1],&attr,thread2,(void *) ValThread2);
//
Сейчас выполняются оба потока
// Синхронизироваться с завершением всех потоков
for(threadcount = 0; threadcount < num_thread; threadcount++){
pthread_join(thread_ids[threadcount],NULL);
}
// вывод результатов работы потоков
printf("result thread1 %i\n",ValThread1);
printf("result thread2 %i\n",ValThread2);
return 0;
}